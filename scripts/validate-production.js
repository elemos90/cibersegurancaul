#!/usr/bin/env node

/**
 * Script de Valida√ß√£o Pr√©-Deploy
 * Verifica se todas as configura√ß√µes necess√°rias est√£o corretas antes do deploy
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Validando configura√ß√µes de produ√ß√£o...\n');
console.log('='.repeat(60));

let errors = 0;
let warnings = 0;

// 1. Verificar arquivo .env.production
console.log('\nüìÅ Verificando arquivo .env.production...');
const envPath = path.join(process.cwd(), '.env.production');
if (!fs.existsSync(envPath)) {
  console.error('‚ùå ERRO: Arquivo .env.production n√£o encontrado');
  errors++;
} else {
  console.log('‚úÖ Arquivo .env.production encontrado');
  
  // Ler vari√°veis
  const envContent = fs.readFileSync(envPath, 'utf-8');
  
  // Verificar vari√°veis cr√≠ticas
  const requiredVars = [
    'DATABASE_URL',
    'NEXTAUTH_URL',
    'NEXTAUTH_SECRET',
  ];
  
  console.log('\nüîê Verificando vari√°veis de ambiente...');
  requiredVars.forEach(varName => {
    if (!envContent.includes(`${varName}=`)) {
      console.error(`‚ùå ERRO: Vari√°vel ${varName} n√£o encontrada`);
      errors++;
    } else if (
      envContent.includes(`${varName}="seu_`) || 
      envContent.includes(`${varName}=""`) ||
      envContent.includes(`${varName}="uni_user:SenhaForte`) // Credenciais de exemplo
    ) {
      console.warn(`‚ö†Ô∏è  AVISO: Vari√°vel ${varName} parece ter valor de exemplo`);
      warnings++;
    } else {
      console.log(`‚úÖ Vari√°vel ${varName} configurada`);
    }
  });
  
  // Verificar NODE_ENV
  if (envContent.includes('NODE_ENV="production"') || envContent.includes('NODE_ENV=production')) {
    console.log('‚úÖ NODE_ENV configurado para produ√ß√£o');
  } else {
    console.warn('‚ö†Ô∏è  AVISO: NODE_ENV n√£o est√° definido como "production"');
    warnings++;
  }
}

// 2. Verificar schema do Prisma
console.log('\nüóÑÔ∏è  Verificando schema do Prisma...');
const schemaPath = path.join(process.cwd(), 'prisma', 'schema.prisma');
if (!fs.existsSync(schemaPath)) {
  console.error('‚ùå ERRO: Schema do Prisma n√£o encontrado em prisma/schema.prisma');
  errors++;
} else {
  console.log('‚úÖ Schema do Prisma encontrado');
}

// 3. Verificar se o build foi feito
console.log('\nüèóÔ∏è  Verificando build do Next.js...');
const nextBuildPath = path.join(process.cwd(), '.next');
if (!fs.existsSync(nextBuildPath)) {
  console.warn('‚ö†Ô∏è  AVISO: Build do Next.js n√£o encontrado');
  console.warn('   Execute "npm run build" antes do deploy');
  warnings++;
} else {
  console.log('‚úÖ Build do Next.js encontrado');
}

// 4. Verificar package.json
console.log('\nüì¶ Verificando depend√™ncias...');
const packagePath = path.join(process.cwd(), 'package.json');
if (fs.existsSync(packagePath)) {
  const pkg = JSON.parse(fs.readFileSync(packagePath, 'utf-8'));
  
  // Verificar depend√™ncias cr√≠ticas
  const requiredDeps = ['next', 'next-auth', '@prisma/client', 'bcryptjs', 'zod'];
  let missingDeps = 0;
  
  requiredDeps.forEach(dep => {
    if (!pkg.dependencies || !pkg.dependencies[dep]) {
      console.error(`‚ùå ERRO: Depend√™ncia "${dep}" n√£o encontrada`);
      errors++;
      missingDeps++;
    }
  });
  
  if (missingDeps === 0) {
    console.log(`‚úÖ Todas as ${requiredDeps.length} depend√™ncias cr√≠ticas encontradas`);
  }
  
  // Verificar scripts necess√°rios
  const requiredScripts = ['build', 'start'];
  let missingScripts = 0;
  
  requiredScripts.forEach(script => {
    if (!pkg.scripts || !pkg.scripts[script]) {
      console.error(`‚ùå ERRO: Script "${script}" n√£o encontrado em package.json`);
      errors++;
      missingScripts++;
    }
  });
  
  if (missingScripts === 0) {
    console.log(`‚úÖ Scripts necess√°rios encontrados`);
  }
} else {
  console.error('‚ùå ERRO: package.json n√£o encontrado');
  errors++;
}

// 5. Verificar arquivos de autentica√ß√£o
console.log('\nüîí Verificando arquivos de autentica√ß√£o...');
const authFiles = [
  'src/lib/auth.ts',
  'src/app/api/auth/[...nextauth]/route.ts',
  'src/lib/prisma.ts',
];

let missingAuthFiles = 0;
authFiles.forEach(file => {
  const filePath = path.join(process.cwd(), file);
  if (!fs.existsSync(filePath)) {
    console.error(`‚ùå ERRO: Arquivo ${file} n√£o encontrado`);
    errors++;
    missingAuthFiles++;
  }
});

if (missingAuthFiles === 0) {
  console.log(`‚úÖ Todos os ${authFiles.length} arquivos de autentica√ß√£o encontrados`);
}

// 6. Verificar arquivos cr√≠ticos de configura√ß√£o
console.log('\n‚öôÔ∏è  Verificando configura√ß√µes...');
const configFiles = [
  'next.config.mjs',
  'tsconfig.json',
  'tailwind.config.js',
];

let missingConfigFiles = 0;
configFiles.forEach(file => {
  const filePath = path.join(process.cwd(), file);
  if (!fs.existsSync(filePath)) {
    console.error(`‚ùå ERRO: Arquivo ${file} n√£o encontrado`);
    errors++;
    missingConfigFiles++;
  }
});

if (missingConfigFiles === 0) {
  console.log(`‚úÖ Arquivos de configura√ß√£o encontrados`);
}

// 7. Verificar middleware
console.log('\nüõ°Ô∏è  Verificando middleware...');
const middlewarePath = path.join(process.cwd(), 'src', 'middleware.ts');
if (!fs.existsSync(middlewarePath)) {
  console.warn('‚ö†Ô∏è  AVISO: Middleware n√£o encontrado em src/middleware.ts');
  warnings++;
} else {
  console.log('‚úÖ Middleware encontrado');
}

// Resumo final
console.log('\n' + '='.repeat(60));
console.log('\nüìä RESUMO DA VALIDA√á√ÉO:');
console.log('='.repeat(60));

if (errors === 0 && warnings === 0) {
  console.log('\n‚úÖ ‚úÖ ‚úÖ VALIDA√á√ÉO CONCLU√çDA COM SUCESSO! ‚úÖ ‚úÖ ‚úÖ');
  console.log('\nüöÄ O projeto est√° pronto para deploy em produ√ß√£o.');
  console.log('\nPr√≥ximos passos:');
  console.log('  1. Fazer upload dos arquivos para o servidor');
  console.log('  2. Configurar vari√°veis de ambiente no cPanel');
  console.log('  3. Executar: npm install --production');
  console.log('  4. Executar: npx prisma generate');
  console.log('  5. Executar: npx prisma migrate deploy');
  console.log('  6. Executar: npm run build');
  console.log('  7. Executar: npm start');
  console.log('\n' + '='.repeat(60));
  process.exit(0);
} else {
  console.log(`\nüìà Estat√≠sticas:`);
  console.log(`   ‚ùå Erros cr√≠ticos: ${errors}`);
  console.log(`   ‚ö†Ô∏è  Avisos: ${warnings}`);
  
  if (errors > 0) {
    console.log('\n‚ùå VALIDA√á√ÉO FALHOU!');
    console.log('\n‚ö†Ô∏è  Corrija os erros acima antes de fazer deploy.');
    console.log('   O deploy com erros cr√≠ticos pode causar falhas no sistema.');
    console.log('\n' + '='.repeat(60));
    process.exit(1);
  } else {
    console.log('\n‚ö†Ô∏è  VALIDA√á√ÉO COM AVISOS');
    console.log('\nüí° Revise os avisos acima antes de fazer deploy.');
    console.log('   O sistema pode funcionar, mas podem haver problemas.');
    console.log('\n' + '='.repeat(60));
    process.exit(0);
  }
}
